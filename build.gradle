plugins {
	id 'org.springframework.boot' version '2.2.1.RELEASE'
	id 'org.jetbrains.kotlin.jvm' version '1.3.60'
	id 'org.jetbrains.kotlin.plugin.spring' version '1.3.60'
	id "org.jetbrains.kotlin.kapt" version "1.3.60"
	id "org.flywaydb.flyway" version "6.0.8"
	id "com.diffplug.gradle.spotless" version "3.13.0"
}

apply plugin: 'io.spring.dependency-management'

ext {
	set('group', 'com.kaiyujin')
	set('version', 'v1.0.0')
	set('sourceCompatibility', '1.8')
	set('domaVersion', '2.24.0')
	set('springfoxVersion', '2.9.2')
	set('graphqlSpringVersion', '5.10.0')
}

//
// Declaring repositories as source for resolving dependencies.
//
repositories {
	mavenCentral()
	jcenter()
}

//
// Application Foundation dependencies and settings.
//
dependencies {
	implementation 'org.seasar.doma.boot:doma-spring-boot-starter:1.1.1'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.jetbrains.kotlin:kotlin-reflect'
	implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
	compile 'org.springframework.boot:spring-boot-devtools'
	compile 'com.fasterxml.jackson.module:jackson-module-kotlin'
}

//
// UnitTest dependencies and settings.
//
dependencies {
	testCompile('org.springframework.boot:spring-boot-starter-test') {
		exclude module: 'junit'
	}
	testImplementation('org.junit.jupiter:junit-jupiter-api')
	testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
}

test {
	useJUnitPlatform()
}

//
// Database dependencies and settings.
//
dependencies {
	implementation "org.seasar.doma:doma:${domaVersion}"
	kapt "org.seasar.doma:doma:${domaVersion}"
	runtime 'org.postgresql:postgresql'
	implementation 'org.flywaydb:flyway-core'
}


// GraphQL
dependencies {
	graphqlSpringVersion
	implementation "com.graphql-java-kickstart:graphql-spring-boot-starter:${graphqlSpringVersion}"
	implementation "com.graphql-java-kickstart:graphiql-spring-boot-starter:${graphqlSpringVersion}"
	implementation "com.graphql-java-kickstart:altair-spring-boot-starter:${graphqlSpringVersion}"
	implementation "com.graphql-java-kickstart:graphql-java-tools:5.6.1"
}

task copyDomaResources(type: Sync)  {
	from sourceSets.main.resources.srcDirs
	into compileKotlin.destinationDir
	include 'doma.compile.configuration'
	include 'META-INF/**/*.sql'
	include 'META-INF/**/*.script'
}

//
// Parser dependencies and settings.
//
dependencies {
	compile 'org.jsoup:jsoup:1.12.1'
}

//
// Document dependencies and settings
//
dependencies {
	compile 'io.swagger:swagger-annotations:1.5.22'
	compile "io.springfox:springfox-swagger2:${springfoxVersion}"
	compile "io.springfox:springfox-swagger-ui:${springfoxVersion}"
	compile "io.springfox:springfox-bean-validators:${springfoxVersion}"
}

//
// Lint and Formatter dependencies and settings.
//
configurations {
	ktlint
}

dependencies {
	ktlint 'com.pinterest:ktlint:0.32.0'
}

task ktlint(type: JavaExec, group: "verification") {
	description = "Check Kotlin code style."
	classpath = configurations.ktlint
	main = "com.pinterest.ktlint.Main"
	args "src/**/*.kt"
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
	description = "Fix Kotlin code style deviations."
	classpath = configurations.ktlint
	main = "com.pinterest.ktlint.Main"
	args "-F", "src/**/*.kt"
}

//
// Compile settings.
//
compileKotlin {
	dependsOn copyDomaResources
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}

compileTestKotlin {
	kotlinOptions {
		freeCompilerArgs = ['-Xjsr305=strict']
		jvmTarget = '1.8'
	}
}
